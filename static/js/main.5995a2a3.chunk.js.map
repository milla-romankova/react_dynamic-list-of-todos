{"version":3,"sources":["components/PropTypes/TodoPropType.js","components/Todo/Todo.js","components/Inputs/Inputs.js","components/TodoList/TodoList.jsx","components/CurrentUser/CurrentUser.jsx","components/PropTypes/CurrentUserPropTypes.js","api/api.js","App.jsx","index.js"],"names":["PropTypes","number","isRequired","string","bool","Todo","todo","selectUser","selectedUserId","id","title","completed","userId","key","className","classNames","type","checked","readOnly","onClick","Inputs","query","handleChange","visibleTodos","htmlFor","name","value","onChange","TodoList","state","filterCompleted","all","active","event","target","setState","this","props","todos","filteredTodos","filter","toLowerCase","includes","map","React","Component","CurrentUser","func","user","clearUser","loadData","prevProps","getUser","email","phone","request","url","fetch","then","response","ok","Error","status","statusText","json","result","data","App","checkedTodos","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5995a2a3.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nexport const TodoPropType = {\n  id: PropTypes.number.isRequired,\n  userId: PropTypes.number,\n  title: PropTypes.string.isRequired,\n  completed: PropTypes.bool,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { TodoPropType } from '../PropTypes/TodoPropType';\n\nexport const Todo = ({ todo, selectUser, selectedUserId }) => {\n  const { id, title, completed, userId } = todo;\n\n  return (\n    <li\n      key={id}\n      className={classNames('TodoList__item',\n        {\n          'TodoList__item--unchecked': !completed,\n          'TodoList__item--checked': completed,\n        })}\n    >\n\n      <label>\n        <input type=\"checkbox\" checked={completed} readOnly />\n        <p>{title}</p>\n      </label>\n\n      <button\n        type=\"button\"\n        className={classNames('button TodoList__user-button', {\n          'TodoList__user-button--selected':\n            userId === selectedUserId,\n        })}\n        onClick={() => selectUser(userId)}\n      >\n        {`UserID #${userId}`}\n      </button>\n    </li>\n  );\n};\n\nTodo.propTypes = {\n  todo: TodoPropType.isRequired,\n  selectedUserId: PropTypes.number.isRequired,\n  selectUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoPropType } from '../PropTypes/TodoPropType';\n\nexport const Inputs = ({ query, handleChange, visibleTodos }) => (\n  <div className=\"TodoList__inputs\">\n    <label htmlFor=\"search\">\n      Search todo in list:\n      <input\n        type=\"text\"\n        id=\"search\"\n        className=\"TodoList__input\"\n        name=\"query\"\n        value={query}\n        onChange={handleChange}\n      />\n    </label>\n\n    <label htmlFor=\"visibletodos\">\n      Choose todos\n      <select\n        id=\"visibleTodos\"\n        name=\"visibleTodos\"\n        value={visibleTodos}\n        onChange={handleChange}\n      >\n        <option value=\"all\">All</option>\n        <option value=\"active\">Active</option>\n        <option value=\"completed\">Completed</option>\n      </select>\n    </label>\n  </div>\n);\n\nInputs.propTypes = {\n  handleChange: PropTypes.func.isRequired,\n  query: PropTypes.string.isRequired,\n  visibleTodos: PropTypes.arrayOf(\n    PropTypes.shape(TodoPropType),\n  ).isRequired,\n};\n","import React from 'react';\nimport './TodoList.scss';\nimport PropTypes from 'prop-types';\nimport { TodoPropType } from '../PropTypes/TodoPropType';\n\nimport { Todo } from '../Todo';\nimport { Inputs } from '../Inputs';\n\nexport class TodoList extends React.Component {\n  state = {\n    query: '',\n    visibleTodos: 'all',\n  }\n\n  filterCompleted = {\n    all: () => true,\n    active: todo => !todo.completed,\n    completed: todo => todo.completed,\n  }\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n\n    this.setState({ [name]: value });\n  }\n\n  render() {\n    const { query, visibleTodos } = this.state;\n    const { todos, selectUser, selectedUserId } = this.props;\n    const { handleChange, filterCompleted } = this;\n\n    const filteredTodos = todos\n      .filter(todo => todo.title.toLowerCase().includes(query.toLowerCase())\n        && filterCompleted[visibleTodos](todo));\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <Inputs\n          handleChange={handleChange}\n          query={query}\n          visibleTodos={visibleTodos}\n        />\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {filteredTodos.map(todo => (\n              <Todo\n                todo={todo}\n                selectUser={selectUser}\n                selectedUserId={selectedUserId}\n              />\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape(TodoPropType),\n  ).isRequired,\n  selectedUserId: PropTypes.number.isRequired,\n  selectUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\n\nimport { CurrentUserPropTypes } from '../PropTypes/CurrentUserPropTypes';\nimport './CurrentUser.scss';\n\nexport class CurrentUser extends React.Component {\n  state={\n    user: 0,\n  }\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId !== this.props.userId) {\n      this.loadData();\n    }\n  }\n\n  clearUser = () => {\n    this.props.selectUser(0);\n  }\n\n  async loadData() {\n    const user = await (this.props.getUser(this.props.userId));\n\n    this.setState({ user });\n  }\n\n  render() {\n    const { user } = this.state;\n\n    return (\n      <div>\n        {!user\n          ? (\n            <h2 className=\"CurrentUser__title\">\n              <span>No information about the user</span>\n            </h2>\n          )\n          : (\n            <div className=\"CurrentUser\">\n              <h2 className=\"CurrentUser__title\">\n                <span>\n                  Selected user:\n                  {user.id}\n                </span>\n              </h2>\n\n              <h3 className=\"CurrentUser__name\">{user.name}</h3>\n              <p className=\"CurrentUser__email\">{user.email}</p>\n              <p className=\"CurrentUser__phone\">{user.phone}</p>\n            </div>\n          )\n        }\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={this.clearUser}\n        >\n          Clear user\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = CurrentUserPropTypes;\n","import PropTypes from 'prop-types';\n\nexport const CurrentUserPropTypes = {\n  userId: PropTypes.number.isRequired,\n  selectUser: PropTypes.func.isRequired,\n  getUser: PropTypes.func.isRequired,\n};\n","const BASE_URL = 'https://mate-api.herokuapp.com';\n\nconst request = url => fetch(`${BASE_URL}${url}`)\n  .then((response) => {\n    if (!response.ok) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    return response.json();\n  })\n  .then(result => result.data);\n\nexport const getAllTodos = () => request(`/todos`);\n\nexport const getUser = userId => request(`/users/${userId}`);\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\n\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getAllTodos, getUser } from './api/api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  componentDidMount() {\n    getAllTodos()\n      .then((todos) => {\n        const checkedTodos = todos.filter(todo => (\n          todo.title && todo.id));\n\n        this.setState({ todos: checkedTodos });\n      });\n  }\n\n  selectUser = (id) => {\n    this.setState({\n      selectedUserId: id,\n    });\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n    const { selectUser } = this;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          {todos.length\n            ? (\n              <TodoList\n                todos={todos}\n                selectUser={selectUser}\n                selectedUserId={selectedUserId}\n              />\n            )\n            : (\n              'Everything is done!'\n            )\n          }\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                getUser={getUser}\n                selectUser={selectUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}